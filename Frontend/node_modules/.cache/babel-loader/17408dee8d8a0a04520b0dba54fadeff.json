{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\simra\\\\Documents\\\\P2P FILE SHARING VERSIONS\\\\P2P File Sharing Project 5.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\simra\\\\Documents\\\\P2P FILE SHARING VERSIONS\\\\P2P File Sharing Project 5.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\simra\\\\Documents\\\\P2P FILE SHARING VERSIONS\\\\P2P File Sharing Project 5.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\simra\\\\Documents\\\\P2P FILE SHARING VERSIONS\\\\P2P File Sharing Project 5.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\simra\\\\Documents\\\\P2P FILE SHARING VERSIONS\\\\P2P File Sharing Project 5.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\simra\\\\Documents\\\\P2P FILE SHARING VERSIONS\\\\P2P File Sharing Project 5.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\simra\\\\Documents\\\\P2P FILE SHARING VERSIONS\\\\P2P File Sharing Project 5.0\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React from \"react\";\nimport { io } from \"socket.io-client\";\nimport { config } from \"../config\";\nimport { Store } from \"../flux\";\nimport FileOperations from \"./fileOperations\";\nimport { default as PeerService } from \"./peerService\";\n\nvar SocketService = /*#__PURE__*/function (_React$Component) {\n  _inherits(SocketService, _React$Component);\n\n  function SocketService() {\n    var _this;\n\n    _classCallCheck(this, SocketService);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SocketService).call(this));\n    _this.socket = null;\n    _this.socketConnected = false;\n    _this.roomId = \"common-room\";\n\n    _this.startServerConnection();\n\n    return _this;\n  }\n  /**\n   * This function triggers a new socket connection on Login.\n   * All initialization tasks are take care of on the socket hooks.\n   */\n\n\n  _createClass(SocketService, [{\n    key: \"startServerConnection\",\n    value: function () {\n      var _startServerConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n\n        var socketIoOptions, onOpenCallback, onCloseCallback;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                socketIoOptions = _objectSpread({}, config.socketIoOptions, {\n                  auth: {\n                    token: localStorage.getItem(\"user-access-token\")\n                  }\n                });\n                this.socket = io(config.socketUrl, socketIoOptions);\n\n                onOpenCallback = function onOpenCallback() {\n                  Store.updateSocketId(_this2.socket.id);\n                  console.log(\"Socket conection Room id: \".concat(_this2.roomId, \" User id: \").concat(Store.getUserId(), \" now open\"));\n                };\n\n                onCloseCallback = function onCloseCallback() {\n                  console.log(\"Close conection Room id: \".concat(_this2.roomId, \" User id: \").concat(Store.getUserId()));\n                };\n\n                this.socket.on(\"connect\", onOpenCallback);\n                this.socket.on(\"disconnect\", onCloseCallback);\n                this.socket.on(\"message\", function (message) {\n                  _this2.gotMessageFromServer(message);\n                });\n                return _context.abrupt(\"return\");\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Error in start connection, \", _context.t0);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n\n      function startServerConnection() {\n        return _startServerConnection.apply(this, arguments);\n      }\n\n      return startServerConnection;\n    }()\n    /**\n     * This function will send the user message and data along with the local user's ID, to the socket server.\n     * @param {*} messageType \n     * @param {*} data \n     */\n\n  }, {\n    key: \"send\",\n    value: function send(messageType, data) {\n      if (this.isOpen) {\n        data.sender = Store.getUserId();\n        this.socket.emit(messageType, data);\n      }\n    }\n    /**\n     * This function listens to all the messages received on the user's socket.\n     * @param {*} message \n     */\n\n  }, {\n    key: \"gotMessageFromServer\",\n    value: function gotMessageFromServer(message) {\n      try {\n        if (message.datasender !== Store.getUserId()) {\n          switch (message.type) {\n            //executes at original/existing user.\n            case 'new_user_joined':\n              {\n                PeerService.newUserJoined();\n                break;\n              }\n            //executes at new user\n\n            case 'init_peer':\n              {\n                PeerService.initPeer();\n                break;\n              }\n            //executes at original/existing user.\n\n            case 'send_offer':\n              {\n                PeerService.sendOffer(message.data);\n                break;\n              }\n            //executes at new user\n\n            case 'send_answer':\n              {\n                PeerService.sendAnswer(message.data);\n                break;\n              }\n\n            case 'download_file':\n              {\n                FileOperations.processDownloadFile(message.data);\n                break;\n              }\n\n            default:\n          }\n        }\n      } catch (error) {\n        console.error(\"Error in signalling, \", error);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.isOpen) {\n        this.socket.close();\n      }\n    }\n  }, {\n    key: \"getConnection\",\n    get: function get() {\n      return this.socket;\n    }\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this.socket.connected === true;\n    }\n  }]);\n\n  return SocketService;\n}(React.Component);\n\nvar singletonSocketService = /*#__PURE__*/function () {\n  function singletonSocketService() {\n    _classCallCheck(this, singletonSocketService);\n  }\n\n  _createClass(singletonSocketService, null, [{\n    key: \"createInstance\",\n    value: function createInstance() {\n      var object = new SocketService();\n      return object;\n    }\n  }, {\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!singletonSocketService.instance) {\n        singletonSocketService.instance = singletonSocketService.createInstance();\n      }\n\n      return singletonSocketService.instance;\n    }\n  }]);\n\n  return singletonSocketService;\n}();\n\nsingletonSocketService.instance = null;\nexport default singletonSocketService.getInstance();","map":{"version":3,"names":["React","io","config","Store","FileOperations","default","PeerService","SocketService","socket","socketConnected","roomId","startServerConnection","socketIoOptions","auth","token","localStorage","getItem","socketUrl","onOpenCallback","updateSocketId","id","console","log","getUserId","onCloseCallback","on","message","gotMessageFromServer","error","messageType","data","isOpen","sender","emit","datasender","type","newUserJoined","initPeer","sendOffer","sendAnswer","processDownloadFile","close","connected","Component","singletonSocketService","object","instance","createInstance","getInstance"],"sources":["C:/Users/simra/Documents/P2P FILE SHARING VERSIONS/P2P File Sharing Project 5.0/Frontend/src/services/socketService.js"],"sourcesContent":["import React from \"react\";\nimport { io } from \"socket.io-client\";\nimport { config } from \"../config\";\nimport { Store } from \"../flux\";\nimport FileOperations from \"./fileOperations\";\nimport { default as PeerService } from \"./peerService\";\n\nclass SocketService extends React.Component {\n  constructor() {\n    super();\n    this.socket = null;\n    this.socketConnected = false;\n    this.roomId = \"common-room\";\n    this.startServerConnection();\n  }\n\n  /**\n   * This function triggers a new socket connection on Login.\n   * All initialization tasks are take care of on the socket hooks.\n   */\n  async startServerConnection() {\n    try {\n      const socketIoOptions = {\n        ...config.socketIoOptions,\n        auth: {\n          token: localStorage.getItem(\"user-access-token\")\n        },\n      }\n      this.socket = io(config.socketUrl, socketIoOptions);\n\n      const onOpenCallback = () => {\n        Store.updateSocketId(this.socket.id);\n        console.log(\n          `Socket conection Room id: ${this.roomId} User id: ${Store.getUserId()} now open`\n        );\n      };\n\n      const onCloseCallback = () => {\n        console.log(\n          `Close conection Room id: ${this.roomId} User id: ${Store.getUserId()}`\n        );\n      };\n\n      this.socket.on(\"connect\", onOpenCallback);\n      this.socket.on(\"disconnect\", onCloseCallback);\n      this.socket.on(\"message\", (message) => { this.gotMessageFromServer(message) });\n\n      return;\n    } catch (error) {\n      console.error(\"Error in start connection, \", error);\n    }\n  }\n\n  /**\n   * This function will send the user message and data along with the local user's ID, to the socket server.\n   * @param {*} messageType \n   * @param {*} data \n   */\n  send(messageType, data) {\n    if (this.isOpen) {\n      data.sender = Store.getUserId();\n      this.socket.emit(messageType, data);\n    }\n  }\n\n  /**\n   * This function listens to all the messages received on the user's socket.\n   * @param {*} message \n   */\n  gotMessageFromServer(message) {\n    try {\n      if (message.datasender !== Store.getUserId()) {\n        switch (message.type) {\n          //executes at original/existing user.\n          case 'new_user_joined': {\n            PeerService.newUserJoined();\n            break;\n        }\n          //executes at new user\n          case 'init_peer': {\n            PeerService.initPeer();\n            break;\n          }\n          //executes at original/existing user.\n          case 'send_offer': {\n            PeerService.sendOffer(message.data);\n            break;\n          }\n          //executes at new user\n          case 'send_answer': {\n            PeerService.sendAnswer(message.data);\n            break;\n          }\n\n          case 'download_file': {\n            FileOperations.processDownloadFile(message.data);\n            break;\n          }\n          default:\n        }\n      }\n    } catch (error) {\n      console.error(\"Error in signalling, \", error);\n    }\n  }\n\n  get getConnection() {\n    return this.socket;\n  }\n\n  get isOpen() {\n    return this.socket.connected === true;\n  }\n\n  close() {\n    if (this.isOpen) {\n      this.socket.close();\n    }\n  }\n\n}\n\nclass singletonSocketService {\n\n  static instance = null;\n  static createInstance() {\n    var object = new SocketService();\n    return object;\n  }\n\n  static getInstance() {\n    if (!singletonSocketService.instance) {\n      singletonSocketService.instance = singletonSocketService.createInstance();\n    }\n    return singletonSocketService.instance;\n  }\n}\n\nexport default singletonSocketService.getInstance();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}